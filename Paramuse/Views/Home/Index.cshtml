@model System.Collections.Immutable.IImmutableList<Paramuse.Models.Album>

@section styles
{
    <link rel="stylesheet" href="~/home.css" asp-append-version="true" />
}

<div id="player">
    <div class="track-artist"></div>
    <div class="track-album"></div>
    <div class="track-title"></div>
    <div class="spectrum">
        @for (int bar = 0; bar < 10; bar++)
        {
            <div>
                @for (int segment = 0; segment < 8; segment++)
                {
                    <div></div>
                }
            </div>
        }
    </div>
    <a class="album-cover"></a>
    <div class="controls">
        @* &#xFE0E; is the unicode text variation selector, to make a symbol render as a plain text character instead of a coloured emoji. *@
        <button class="previous" title="Previous track">⏮&#xFE0E;</button>
        <button class="play" title="Play/pause">⏯&#xFE0E;</button>
        <label title="Shuffle. If enabled, albums will be chosen at random instead of alphabetical order. Tracks within albums will still be played in order.">
            <input type="checkbox" name="shuffle" checked>
            <button class="shuffle">🔀&#xFE0E;</button>
        </label>
        <button class="next" title="Next track">⏭&#xFE0E;</button>
        <div class="timeline">
            <input type="range" value="0" autocomplete="off">
            <div>0:00/0:00</div>
        </div>
        <div class="volume">
            <span>🔊</span>
            <input type="range" min="-18" max="6" step="1" value="0">
        </div>
    </div>
</div>

<ul id="album-list">
    @{ var albumIndex = 0; }
    @foreach (var album in Model)
    {
        static string? tagStateClass(TagState tagState) => tagState switch
        {
            TagState.Missing => "tag-missing",
            TagState.Mixed => "tag-mixed",
            TagState.Consistent => null,
            _ => throw new ArgumentOutOfRangeException(nameof(tagState), $"Missing case for {tagState}")
        };
        static string? tagStateTitle(TagState tagState, string tagName) => tagState switch
        {
            TagState.Missing => $"This album has missing {tagName} tags",
            TagState.Mixed => $"This album has inconsistent {tagName} tags",
            TagState.Consistent => null,
            _ => throw new ArgumentOutOfRangeException(nameof(tagState), $"Missing case for {tagState}")
        };
        <li id="album-@(albumIndex++)">
            <details>
                <summary>
                    <div class="album-artist @tagStateClass(album.ArtistTagState)" title="@tagStateTitle(album.ArtistTagState, "artist name")">@album.Artist</div>
                    <div class="album-title @tagStateClass(album.NameTagState)" title="@tagStateTitle(album.NameTagState, "album title")">@album.Name</div>
                    @if (album.CoverPath != "")
                    {
                        <img class="album-cover" src="@Url.Action("Cover", new { path = album.CoverPath })" loading="lazy">
                    }
                    else
                    {
                        <div class="album-cover">?</div>
                    }
                    <button class="@tagStateClass(album.ReplayGainTagState)" title="@tagStateTitle(album.ReplayGainTagState, "ReplayGain")">⏵</button>
                </summary>
                <ol>
                    @{
                        var discs = album.Tracks.GroupBy(track => track.DiscNo);
                        var hasMultipleDiscs = discs.Count() > 1;

                        foreach (var disc in discs)
                        {
                            foreach (var (track, index) in disc.Select((track, index) => (track, index)))
                            {
                                var inconsistentTrackNo = track.TrackNo != (index + 1);
                                var specifyTrackNo = inconsistentTrackNo || (hasMultipleDiscs && index == 0);
                                var value = specifyTrackNo ? hasMultipleDiscs ? (disc.Key * 100) + track.TrackNo : track.TrackNo : (int?)null;
                                // This should really be worked out in the Tag constructor, but the actual track index isn't known at that point.
                                var trackNoTagState = track.TrackNoTagState == TagState.Missing ? TagState.Missing :
                                    inconsistentTrackNo ? TagState.Mixed :
                                    track.TrackNoTagState;
                                <li class="@(tagStateClass(trackNoTagState))" title="@tagStateTitle(trackNoTagState, "track no.")" value="@value" data-src="@Url.Action("Track", new { path = track.Path })" data-gain="@track.Gain" data-peak="@track.Peak">
                                    <a href="#tag-modal" data-url="@Url.Action("Tags", new { path = track.Path })">
                                        <div class="track-album @tagStateClass(track.AlbumTagState)">@track.Album</div>
                                        <div class="track-artist @tagStateClass(track.ArtistTagState)">@track.Artist</div>
                                        <div class="track-title @tagStateClass(track.TitleTagState)">@track.Title</div>
                                    </a>
                                </li>
                            }
                        }
                    }
                </ol>
            </details>
        </li>
    }
</ul>

<dialog id="tag-modal">
    <form><button formmethod="dialog">❌</button></form>
    <div class="modal-content"></div>
</dialog>

@section scripts
{
    <script src="~/home.js" asp-append-version="true"></script>
}
